// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using MetricDefinitions;
//
//    var metricDefinition = MetricDefinition.FromJson(jsonString);

namespace MetricDefinitions {
    using System.Collections.Generic;
    using System.Globalization;
    using System;
    using Newtonsoft.Json.Converters;
    using Newtonsoft.Json;

    public partial class MetricDefinition {
        [JsonProperty("service_name", NullValueHandling = NullValueHandling.Ignore)]
        public string ServiceName { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public string Url { get; set; }

        [JsonProperty("request_headers", NullValueHandling = NullValueHandling.Ignore)]
        public object[] RequestHeaders { get; set; }

        [JsonProperty("auth_credentials", NullValueHandling = NullValueHandling.Ignore)]
        public AuthCredentials AuthCredentials { get; set; }

        [JsonProperty("metrics", NullValueHandling = NullValueHandling.Ignore)]
        public Metric[] Metrics { get; set; }
    }

    public partial class AuthCredentials {
        [JsonProperty("token", NullValueHandling = NullValueHandling.Ignore)]
        public string Token { get; set; }

        [JsonProperty("username", NullValueHandling = NullValueHandling.Ignore)]
        public string Username { get; set; }

        [JsonProperty("password", NullValueHandling = NullValueHandling.Ignore)]
        public string Password { get; set; }
    }

    public partial class Metric {
        [JsonProperty("metric_name", NullValueHandling = NullValueHandling.Ignore)]
        public string MetricName { get; set; }

        [JsonProperty("api_endpoint", NullValueHandling = NullValueHandling.Ignore)]
        public string ApiEndpoint { get; set; }

        [JsonProperty("desired_response_field", NullValueHandling = NullValueHandling.Ignore)]
        public string DesiredResponseField { get; set; }

        [JsonProperty("string_value_mapping", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, double> StringValueMapping { get; set; }

        [JsonProperty("program", NullValueHandling = NullValueHandling.Ignore)]
        public string Program { get; set; }

        [JsonProperty("argument", NullValueHandling = NullValueHandling.Ignore)]
        public string Argument { get; set; }

        [JsonProperty("execution_type", NullValueHandling = NullValueHandling.Ignore)]
        public string ExecutionType { get; set; }

        [JsonProperty("labels", NullValueHandling = NullValueHandling.Ignore)]
        public SortedDictionary<string, string> Labels { get; set; }
    }

    public partial class MetricDefinition {
        public static MetricDefinition[] FromJson(string json) => JsonConvert.DeserializeObject<MetricDefinition[]>(json, MetricDefinitions.Converter.Settings);
    }

    public static class Serialize {
        public static string ToJson(this MetricDefinition[] self) => JsonConvert.SerializeObject(self, MetricDefinitions.Converter.Settings);
    }

    internal static class Converter {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters = {
            new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}