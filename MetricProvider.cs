using System.Collections.Specialized;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using Newtonsoft.Json; // Nuget Package
using System.Text;
using MetricDefinitions;

public class MetricProvider {
    enum MetricProviderType { APICaller, Executor };
    private string mApiEndpoint;
    private string mMetricName;
    private string mResponsebodyIdentifier;
    private AuthCredentials mAuthCredentials;
    private Dictionary<string, double> mValueMapping;
    private string mProgram;
    private string mArgument;
    private HttpClient mClient;
    private SortedDictionary<string, string> mLabels;

    public MetricProvider(string api_endpoint, string metric_name, string reponse_body_identifier, AuthCredentials auth_credentials, Dictionary<string, double> value_mapping, SortedDictionary<string, string> labels) {
        mApiEndpoint = api_endpoint;
        mMetricName = metric_name;
        mResponsebodyIdentifier = reponse_body_identifier;
        mAuthCredentials = auth_credentials;
        mValueMapping = value_mapping;
        mLabels = labels;
        mClient = new HttpClient();
        if (mAuthCredentials != null) {
            if (mAuthCredentials.Token != null) {
                mClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", mAuthCredentials.Token);
            } else {
                if (mAuthCredentials.Username != null && mAuthCredentials.Password != null) {
                    var byteArray = Encoding.ASCII.GetBytes(mAuthCredentials.Username + ":" + mAuthCredentials.Password);
                    mClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic", Convert.ToBase64String(byteArray));
                }
            }
        }
    }
    public MetricProvider(string metric_name, string program, string argument, SortedDictionary<string, string> labels) {
        mMetricName = metric_name;
        mProgram = program;
        mArgument = argument;
        mLabels = labels;
    }

    private string RunCmd(string program, string argument) {
        ProcessStartInfo start = new ProcessStartInfo();
        start.FileName = program;
        start.Arguments = argument;
        start.UseShellExecute = false; // Do not use OS shell
        start.CreateNoWindow = true; // We don't need new window
        start.RedirectStandardOutput = true; // Any output, generated by application will be redirected back
        start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
        using (Process process = Process.Start(start)) {
            using (StreamReader reader = process.StandardOutput) {
                string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                string result = reader.ReadToEnd(); // Here is the result of StdOut(for example: print "test")
                return result;
            }
        }
    }

    private void FlattenDict(string current_root, Dictionary<string, object> input, Dictionary<string, object> output) {
        foreach (KeyValuePair<string, object> entry in input) {
            string new_root = "";
            if (current_root == "") {
                new_root = entry.Key;
            } else {
                new_root = current_root + "." + entry.Key;
            }
            if (entry.Value is Dictionary<string, object>) {
                FlattenDict(new_root, (Dictionary<string, object>)entry.Value, output);
            } else {
                output.Add(new_root, entry.Value);
            }
        }
    }

    public string GetMetricName() {
        return mMetricName;
    }

    public SortedDictionary<string, string> GetLabels() {
        return mLabels;
    }
    public async Task<object> GetValue() {
        object desired_value = null;
        // Call API endpoint or execute program/script
        if (mApiEndpoint != null) {
            Dictionary<string, object> json = await GetCallAPI(mApiEndpoint);
            Dictionary<string, object> flatten_json = new Dictionary<string, object>();
            FlattenDict("", json, flatten_json);
            desired_value = flatten_json[mResponsebodyIdentifier];
        } else if (mProgram != null && mArgument != null) {
            desired_value = Convert.ToDouble(RunCmd(mProgram, mArgument));
        }

        // int double and float are untouched,  strings are converted according to the given value_mapping if present.
        if (desired_value is string) {
            if (mValueMapping != null && mValueMapping.ContainsKey((string)desired_value)) {
                desired_value = mValueMapping[(string)desired_value];
            }
        }

        return desired_value;
    }

    private async Task<Dictionary<string, object>> GetCallAPI(string url) {
        var response = await mClient.GetAsync(url);
        if (response != null) {
            var jsonString = await response.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<Dictionary<string, object>>(jsonString);
        }
        return null;
    }

}