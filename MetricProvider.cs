using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using Newtonsoft.Json; // Nuget Package
using System.Text;
using MetricDefinitions;

public class MetricProvider
{

    private string mApiEndpoint;
    private string mMetricName;
    private string mResponsebodyIdentifier;
    private AuthCredentials mAuthCredentials;
    private Dictionary<string, double> mValueMapping;
    private string mProgram;
    private string mArgument;
    private HttpClient mClient;

    public MetricProvider(string api_endpoint, string metric_name, string reponse_body_identifier, AuthCredentials auth_credentials, Dictionary<string, double> value_mapping, string program, string argument)
    {
        mApiEndpoint = api_endpoint;
        mMetricName = metric_name;
        mResponsebodyIdentifier = reponse_body_identifier;
        mAuthCredentials = auth_credentials;
        mValueMapping = value_mapping;
        mProgram = program;
        mArgument = argument;
        mClient = new HttpClient();
        if (mAuthCredentials != null)
        {
            if (mAuthCredentials.Token != null)
            {
                mClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", mAuthCredentials.Token);
            }
            else
            {
                if (mAuthCredentials.Username != null && mAuthCredentials.Password != null)
                {
                    var byteArray = Encoding.ASCII.GetBytes(mAuthCredentials.Username + ":" + mAuthCredentials.Password);
                    mClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic", Convert.ToBase64String(byteArray));
                }
            }
        }
    }

    private string run_cmd(string program, string argument)
    {
        ProcessStartInfo start = new ProcessStartInfo();
        start.FileName = program;
        start.Arguments = argument;
        start.UseShellExecute = false;// Do not use OS shell
        start.CreateNoWindow = true; // We don't need new window
        start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
        start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
        using (Process process = Process.Start(start))
        {
            using (StreamReader reader = process.StandardOutput)
            {
                string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                string result = reader.ReadToEnd(); // Here is the result of StdOut(for example: print "test")
                return result;
            }
        }
    }

    public async Task<object> get_value()
    {
        object desired_value = null;
        if (mApiEndpoint != null)
        {
            Dictionary<string, object> json = await GetCallAPI(mApiEndpoint);
            // TODO: flatten dictionary
            desired_value = json[mResponsebodyIdentifier];
        }
        else if (mProgram != null && mArgument != null)
        {
            desired_value = Convert.ToDouble(run_cmd(mProgram, mArgument));
        }
        if (desired_value is int || desired_value is double || desired_value is float)
        {
            return (double)desired_value;
        }
        else if (desired_value is string)
        {
            if (mValueMapping != null && mValueMapping.ContainsKey((string)desired_value))
            {
                return mValueMapping[(string)desired_value];
            }
            return (string)desired_value;
        }
        else
        {
            return null;
        }
    }

    private async Task<Dictionary<string, object>> GetCallAPI(string url)
    {
        var response = await mClient.GetAsync(url);
        if (response != null)
        {
            var jsonString = await response.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<Dictionary<string, object>>(jsonString);
        }
        return null;
    }

}